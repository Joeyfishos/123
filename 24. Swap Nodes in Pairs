# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def swapPairs(self, head):
        l = []
        odd = []
        even = []
        ans=[]
        move=head
        while head:
            l.append(head.val)
            head = head.next


        if len(l) == 1:
            return l
        elif not move:
            return []
        else:

            for i in range(0, len(l), 2):
                odd.append(l[i])


            for i in range(1, len(l), 2):
                even.append(l[i])

            odd1=0
            even1=0

            for i in range(0, (len(odd) + len(even))):
                if i % 2 == 0 and even1<len(even):
                    ans.append(even[even1])
                    even1 += 1

                else:
                    
                    ans.append(odd[odd1])
                    odd1 += 1
           
        Ans=ListNode(0)
        pick=Ans
        for i in ans:

            Ans.next=ListNode(i)
            Ans=Ans.next
        return pick.next
    
    
#     class Solution {
# public:
#     ListNode* swapPairs(ListNode* head) {
#         if(!head||!head->next)
#         {
#             return head;
#         }
#         else
#         {
#             ListNode* answer=head->next;
#             ListNode* temp=head->next->next;
#             head->next->next=head;
#             head->next=swapPairs(temp);
#              return answer;
#         }
       
      
#     }
# };
            
            
        
